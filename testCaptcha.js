import puppeteer from 'puppeteer';
import { solveCaptchaAndApply, waitForCaptcha } from './utils/solveCaptcha.js';
import dotenv from 'dotenv';

// Charger les variables d'environnement
dotenv.config();

/**
 * Script de test pour d√©bugger solveCaptcha sur InRento
 */
async function testCaptcha() {
  let browser;
  let page;

  try {
    console.log('üöÄ D√©marrage du test de captcha...');
    
    // Lancer le navigateur en mode visible pour le d√©bogage
    browser = await puppeteer.launch({
      headless: false,
      devtools: true,
      defaultViewport: null,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-web-security',
        '--disable-features=VizDisplayCompositor'
      ]
    });

    page = await browser.newPage();
    
    // Configurer le User Agent
    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
    
    console.log('üåê Navigation vers la page d\'inscription InRento...');
    await page.goto('https://inrento.com/account-registration/', {
      waitUntil: 'networkidle2',
      timeout: 30000
    });

    console.log('‚úÖ Page charg√©e avec succ√®s');
    
    // Attendre que la page soit enti√®rement charg√©e
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // V√©rifier les √©l√©ments pr√©sents sur la page
    console.log('üîç Analyse des √©l√©ments de la page...');
    
    const pageInfo = await page.evaluate(() => {
      return {
        url: window.location.href,
        title: document.title,
        hasRecaptchaIframe: !!document.querySelector('iframe[src*="recaptcha"]'),
        hasRecaptchaDiv: !!document.querySelector('.g-recaptcha'),
        hasSitekeyAttribute: !!document.querySelector('[data-sitekey]'),
        hasRecaptchaTextarea: !!document.querySelector('textarea[name="g-recaptcha-response"]'),
        formElements: {
          emailInput: !!document.querySelector('input[type="email"], input[name*="email"], input[id*="email"]'),
          submitButton: !!document.querySelector('button[type="submit"], input[type="submit"]'),
          forms: document.forms.length
        }
      };
    });
    
    console.log('üìã Informations de la page:');
    console.log(`   - URL: ${pageInfo.url}`);
    console.log(`   - Titre: ${pageInfo.title}`);
    console.log(`   - Iframe reCAPTCHA: ${pageInfo.hasRecaptchaIframe ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - Div .g-recaptcha: ${pageInfo.hasRecaptchaDiv ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - Attribut data-sitekey: ${pageInfo.hasSitekeyAttribute ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - Textarea reCAPTCHA: ${pageInfo.hasRecaptchaTextarea ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - Input email: ${pageInfo.formElements.emailInput ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - Bouton submit: ${pageInfo.formElements.submitButton ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - Nombre de formulaires: ${pageInfo.formElements.forms}`);
    
    // Remplir le formulaire d'abord pour d√©clencher le captcha
    console.log('üìù Remplissage du formulaire de test...');
    
    try {
      // Remplir l'email
      const emailInput = await page.$('input[type="email"], input[name*="email"], input[id*="email"]');
      if (emailInput) {
        await emailInput.type('test@example.com');
        console.log('‚úÖ Email rempli');
      }
      
      // Remplir le mot de passe si pr√©sent
      const passwordInputs = await page.$$('input[type="password"]');
      for (let i = 0; i < passwordInputs.length; i++) {
        await passwordInputs[i].type('TestPassword123!');
        console.log(`‚úÖ Mot de passe ${i + 1} rempli`);
      }
      
      // Cocher les cases √† cocher si pr√©sentes
      const checkboxes = await page.$$('input[type="checkbox"]');
      for (const checkbox of checkboxes) {
        await checkbox.click();
        console.log('‚úÖ Case coch√©e');
      }
      
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur lors du remplissage du formulaire:', error.message);
    }
    
    // Attendre l'apparition du captcha
    console.log('‚è≥ Attente de l\'apparition du captcha...');
    const captchaFound = await waitForCaptcha(page, 15000);
    
    if (!captchaFound) {
      console.log('‚ö†Ô∏è Aucun captcha d√©tect√©, tentative de d√©clenchement...');
      
      // Essayer de cliquer sur le bouton submit pour d√©clencher le captcha
      try {
        const submitButton = await page.$('button[type="submit"], input[type="submit"]');
        if (submitButton) {
          await submitButton.click();
          console.log('üîò Bouton submit cliqu√©');
          
          // Attendre √† nouveau l'apparition du captcha
          await new Promise(resolve => setTimeout(resolve, 3000));
          await waitForCaptcha(page, 10000);
        }
      } catch (error) {
        console.log('‚ö†Ô∏è Impossible de cliquer sur le bouton submit:', error.message);
      }
    }
    
    // Essayer de d√©tecter et r√©soudre le captcha
    console.log('üîê Tentative de r√©solution du captcha...');
    
    try {
      const success = await solveCaptchaAndApply(page);
      
      if (success) {
        console.log('üéâ Captcha r√©solu avec succ√®s !');
        
        // V√©rification d√©taill√©e du statut final
        const finalStatus = await page.evaluate(() => {
          const textarea = document.querySelector('textarea[name="g-recaptcha-response"]');
          const widgets = document.querySelectorAll('.g-recaptcha');
          const forms = document.querySelectorAll('form');
          
          // V√©rifier l'√©tat visuel du captcha
          let visualStatus = 'unknown';
          if (widgets.length > 0) {
            const widget = widgets[0];
            const iframe = widget.querySelector('iframe');
            const checkmark = widget.querySelector('.recaptcha-solved');
            
            if (checkmark) {
              visualStatus = 'marked_solved';
            } else if (iframe) {
              visualStatus = 'iframe_present';
            }
          }
          
          return {
            hasToken: textarea && textarea.value.length > 0,
            tokenLength: textarea ? textarea.value.length : 0,
            tokenPreview: textarea ? textarea.value.substring(0, 30) + '...' : '',
            textareaVisible: textarea ? textarea.style.display !== 'none' : false,
            widgetCount: widgets.length,
            formCount: forms.length,
            visualStatus,
            isFormValid: forms.length > 0 ? forms[0].checkValidity() : false
          };
        });
        
        console.log('üìä Statut final du captcha:');
        console.log(`   - Token pr√©sent: ${finalStatus.hasToken ? '‚úÖ' : '‚ùå'}`);
        console.log(`   - Longueur du token: ${finalStatus.tokenLength}`);
        console.log(`   - Aper√ßu token: ${finalStatus.tokenPreview}`);
        console.log(`   - Textarea visible: ${finalStatus.textareaVisible ? '‚úÖ' : '‚ùå'}`);
        console.log(`   - Widgets reCAPTCHA: ${finalStatus.widgetCount}`);
        console.log(`   - Statut visuel: ${finalStatus.visualStatus}`);
        console.log(`   - Formulaires: ${finalStatus.formCount}`);
        console.log(`   - Formulaire valide: ${finalStatus.isFormValid ? '‚úÖ' : '‚ùå'}`);
        
        // Test de soumission du formulaire (optionnel)
        if (finalStatus.hasToken) {
          console.log('üß™ Test de soumission du formulaire...');
          console.log('‚ÑπÔ∏è Le captcha est r√©solu ! Vous pouvez maintenant cliquer manuellement sur "Create account" dans le navigateur ouvert.');
          console.log('‚ÑπÔ∏è Le token reCAPTCHA est correctement inject√© et le formulaire devrait s\'envoyer normalement.');
        }
        
      } else {
        console.log('‚ùå √âchec de la r√©solution du captcha');
      }
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©solution du captcha:', error.message);
      console.error('Stack trace:', error.stack);
    }
    
    // Attendre avant de fermer pour permettre l'inspection manuelle
    console.log('üîç Test termin√©. Fen√™tre du navigateur ouverte pour inspection manuelle.');
    console.log('Appuyez sur Entr√©e pour fermer le navigateur...');
    
    // En mode interactif, attendre une entr√©e utilisateur
    if (process.stdin.isTTY) {
      await new Promise(resolve => {
        process.stdin.once('data', resolve);
      });
    } else {
      // En mode non-interactif, attendre 30 secondes
      await new Promise(resolve => setTimeout(resolve, 5000));
    }
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
    console.error('Stack trace:', error.stack);
  } finally {
    if (browser) {
      await browser.close();
      console.log('üîí Navigateur ferm√©');
    }
  }
}

// Lancer le test
testCaptcha().catch(console.error); 