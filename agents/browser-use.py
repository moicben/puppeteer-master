from langchain_openai import ChatOpenAI
from langchain_anthropic import ChatAnthropic
from browser_use import Agent, BrowserSession
from dotenv import load_dotenv
import asyncio
import sys
import os

load_dotenv()

# Configuration du mod√®le LLM
def get_llm():
    model_type = os.getenv('LLM_TYPE', 'anthropic')  # par d√©faut anthropic
    
    if model_type.lower() == 'openai':
        return ChatOpenAI(model=os.getenv('OPENAI_MODEL', 'gpt-4o'))
    else:
        return ChatAnthropic(model=os.getenv('ANTHROPIC_MODEL_SONNET'))

llm = get_llm()

# Configuration de session navigateur am√©lior√©e
browser_session = BrowserSession(
    executable_path=os.getenv('PUPPETEER_EXECUTABLE_PATH', 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe'),
    user_data_dir=os.getenv('PUPPETEER_USER_DATA_DIR', 'C:\\Users\\bendo\\Desktop\\Documents\\Tech\\Puppeteer Master\\chrome-profil'),
    viewport={'width': 1440, 'height': 900},
    startMaximized=False,
    headless=False,
    args=[
        '--window-size=1440,900',
        '--disable-web-security',
        '--no-first-run',
        '--disable-blink-features=AutomationControlled',
        '--disable-dev-shm-usage',
        '--no-sandbox'
    ]
)

def show_help():
    """Affiche l'aide d'utilisation"""
    print("""
ü§ñ === AGENT BROWSER AUTOMATION ===
üß† Contr√¥le intelligent du navigateur avec IA

üìù USAGE:
  python browser-use.py "t√¢che √† effectuer"
  python browser-use.py --help

üéØ EXEMPLES DE T√ÇCHES:
  ‚Ä¢ Navigation web:
    python browser-use.py "aller sur Google et rechercher les derni√®res news IA"
    
  ‚Ä¢ Cr√©ation de comptes:
    python browser-use.py "cr√©er un compte Gmail avec mes informations"
    
  ‚Ä¢ E-commerce:
    python browser-use.py "rechercher un iPhone 15 sur Amazon et comparer les prix"
    
  ‚Ä¢ R√©seaux sociaux:
    python browser-use.py "poster un message sur LinkedIn"
    
  ‚Ä¢ Formulaires:
    python browser-use.py "remplir le formulaire de contact sur le site exemple.com"
    
  ‚Ä¢ Recherche d'informations:
    python browser-use.py "rechercher des informations sur les startups fran√ßaises"

‚öôÔ∏è CONFIGURATION:
  ‚Ä¢ Mod√®le IA: {model_type} ({model_name})
  ‚Ä¢ M√©moire: {"Activ√©e" if check_memory_available() else "D√©sactiv√©e"}
  ‚Ä¢ Profil Chrome: Personnalis√©
""".format(
        model_type=os.getenv('LLM_TYPE', 'anthropic').upper(),
        model_name=os.getenv('ANTHROPIC_MODEL_SONNET', 'claude-3-sonnet'),
    ))

def check_memory_available():
    """V√©rifie si les packages m√©moire sont install√©s"""
    try:
        import browser_use.memory
        return True
    except ImportError:
        return False

async def main():
    print("üöÄ === BROWSER AUTOMATION AGENT ===")
    print(f"üß† Mod√®le: {os.getenv('LLM_TYPE', 'anthropic').upper()}")
    print(f"üíæ M√©moire: {'‚úÖ Activ√©e' if check_memory_available() else '‚ö†Ô∏è D√©sactiv√©e'}")
    
    # V√©rifier les arguments
    if len(sys.argv) < 2 or sys.argv[1] in ['--help', '-h', 'help']:
        show_help()
        return
    
    
    # R√©cup√©rer et valider la t√¢che
    task = " ".join(sys.argv[1:])
    
    if len(task.strip()) < 5:
        print("‚ùå Erreur: La t√¢che doit contenir au moins 5 caract√®res.")
        show_help()
        return
    
    print(f"\nüéØ T√¢che: {task}")
    print("üåê Lancement du navigateur...\n")
    
    # Configuration de l'agent avec m√©moire si disponible
    agent_config = {
        'task': task,
        'llm': llm,
        'browser_session': browser_session,
        'enable_memory': False,  # Par d√©faut d√©sactiv√©
        
    }
    
    # Activer la m√©moire si disponible
    if check_memory_available():
        agent_config['enable_memory'] = True
        print("üíæ M√©moire activ√©e - L'agent se souviendra des actions pr√©c√©dentes")
    else:
        agent_config['enable_memory'] = False
        print("‚ö†Ô∏è  M√©moire d√©sactiv√©e - Mode session unique")
    
    agent = Agent(**agent_config)
    
    try:
        print("ü§ñ D√©marrage de l'ex√©cution...\n")
        result = await agent.run()
        
        print(f"\n‚úÖ === T√ÇCHE TERMIN√âE ===")
        print(f"üìã R√©sultat: {result}")
        print(f"‚è±Ô∏è  Session termin√©e avec succ√®s!")
        
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è  T√¢che interrompue par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå === ERREUR ===")
        print(f"üí• {str(e)}")
        print(f"üîß V√©rifiez votre configuration et r√©essayez")

if __name__ == "__main__":
    asyncio.run(main())